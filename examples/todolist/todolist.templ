package todolist

import "fmt"

templ TodoList(data TodoListComponent) {
	<div class="todo-list-component" style="max-width: 600px; margin: 0 auto; padding: 20px; background: #f8f9fa; border-radius: 8px; border: 2px solid #dee2e6;">
		<h3 style="margin-top: 0; color: #495057;">Todo List - Event Demo</h3>

		<!-- Stats -->
		<div style="display: flex; gap: 15px; margin-bottom: 20px; padding: 10px; background: white; border-radius: 4px;">
			<div style="flex: 1;">
				<strong>Active:</strong> { fmt.Sprint(data.GetActiveCount()) }
			</div>
			<div style="flex: 1;">
				<strong>Completed:</strong> { fmt.Sprint(data.GetCompletedCount()) }
			</div>
			<div style="flex: 1;">
				<strong>Total:</strong> { fmt.Sprint(len(data.Items)) }
			</div>
		</div>

		<!-- Event tracking info -->
		if data.LastEvent != "" {
			<div style="padding: 8px; margin-bottom: 15px; background: #d1ecf1; border: 1px solid #bee5eb; border-radius: 4px; color: #0c5460; font-size: 14px;">
				Last event: <strong>{ data.LastEvent }</strong> (Count: { fmt.Sprint(data.EventCount) }) at { data.GetTimestamp() }
			</div>
		}

		<!-- Hidden field to maintain state (stateless component) -->
		<input type="hidden" name="items" value={ data.GetItemsJSON() }/>

		<!-- Add new item form -->
		<div style="margin-bottom: 20px;">
			<div style="display: flex; gap: 10px;">
				<input
					type="text"
					id="newItemText"
					name="newItemText"
					placeholder="What needs to be done?"
					style="flex: 1; padding: 8px 12px; border: 1px solid #ced4da; border-radius: 4px; font-size: 14px;"
				/>
				<button
					hx-post="/component/todolist"
					hx-include="[name='newItemText'], [name='items']"
					hx-vals='{"hxc-event": "addItem"}'
					hx-target="closest .todo-list-component"
					hx-swap="outerHTML"
					style="background: #007bff; color: white; border: none; border-radius: 4px; padding: 8px 16px; cursor: pointer; font-weight: bold; white-space: nowrap;"
				>
					Add Item
				</button>
			</div>
		</div>

		<!-- Todo items list -->
		<div style="background: white; border-radius: 4px; overflow: hidden;">
			if len(data.Items) == 0 {
				<div style="padding: 20px; text-align: center; color: #6c757d;">
					No items yet. Add one above!
				</div>
			} else {
				for _, item := range data.Items {
					<div style={ fmt.Sprintf("display: flex; align-items: center; gap: 10px; padding: 12px; border-bottom: 1px solid #e9ecef; %s",
						func() string {
							if item.Completed {
								return "background: #f1f3f5; opacity: 0.7;"
							}
							return ""
						}()) }>
						<!-- Toggle checkbox -->
						<input
							type="checkbox"
							checked?={ item.Completed }
							hx-post="/component/todolist"
							hx-include="[name='items']"
							hx-vals={ fmt.Sprintf(`{"itemId": %d, "hxc-event": "toggleItem"}`, item.ID) }
							hx-target="closest .todo-list-component"
							hx-swap="outerHTML"
							style="width: 20px; height: 20px; cursor: pointer;"
						/>

						<!-- Item text -->
						<span style={ fmt.Sprintf("flex: 1; %s",
							func() string {
								if item.Completed {
									return "text-decoration: line-through; color: #6c757d;"
								}
								return "color: #212529;"
							}()) }>
							{ item.Text }
						</span>

						<!-- Delete button -->
						<button
							hx-post="/component/todolist"
							hx-include="[name='items']"
							hx-vals={ fmt.Sprintf(`{"itemId": %d, "hxc-event": "deleteItem"}`, item.ID) }
							hx-target="closest .todo-list-component"
							hx-swap="outerHTML"
							hx-confirm="Are you sure you want to delete this item?"
							style="background: #dc3545; color: white; border: none; border-radius: 4px; padding: 4px 8px; cursor: pointer; font-size: 12px;"
						>
							Delete
						</button>
					</div>
				}
			}
		</div>

		<!-- Clear completed button -->
		if data.GetCompletedCount() > 0 {
			<div style="margin-top: 15px; text-align: right;">
				<button
					hx-post="/component/todolist"
					hx-include="[name='items']"
					hx-vals='{"hxc-event": "clearCompleted"}'
					hx-target="closest .todo-list-component"
					hx-swap="outerHTML"
					hx-confirm={ fmt.Sprintf("Clear %d completed items?", data.GetCompletedCount()) }
					style="background: #6c757d; color: white; border: none; border-radius: 4px; padding: 8px 16px; cursor: pointer; font-size: 14px;"
				>
					Clear Completed ({ fmt.Sprint(data.GetCompletedCount()) })
				</button>
			</div>
		}

		<!-- Debug info -->
		<div style="margin-top: 15px; padding: 10px; background: #fff3cd; border: 1px solid #ffc107; border-radius: 4px; font-size: 12px; color: #856404;">
			<strong>Event Lifecycle Demo:</strong><br/>
			This component demonstrates BeforeEvent → OnEventName → AfterEvent → Process → Render<br/>
			Check server logs to see the lifecycle in action!
		</div>
	</div>
}
